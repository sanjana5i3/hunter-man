using System.Collections;
using UnityEngine;
using UnityEngine.AI;

public class Enemy : MonoBehaviour
{
    public Transform player;
    public float speed = 4f;
    public float attackDistance = 1.5f; // Distance at which the enemy starts attacking
    public float stopDistance = 1.0f; // Distance at which the enemy stops moving towards the player
    public float detectDistance = 10f; // Distance at which the enemy starts moving towards the player
    public float attackInterval = 1.5f; // Interval between attacks
    public AudioClip attackSound;
    public int health = 100; // Enemy's health

    private Rigidbody rg;
    private Animator anim;
    private AudioSource audioSource;
    public bool isAttacking = false;
    private float lastAttackTime = 0f;
    private Player1 playerScript;

    void Start()
    {
        rg = GetComponent<Rigidbody>();
        anim = GetComponent<Animator>();
        audioSource = GetComponent<AudioSource>();
        playerScript = FindObjectOfType<Player1>();
        UpdateHealthUI(); // Assuming there is only one player in the scene
    }

    void Update()
    {
        // Calculate the distance to the player
        //float distance = Vector3.Distance(transform.position, player.position);

        //if (distance > detectDistance)
        //{
        //    // Player is too far, enemy remains idle
        //    anim.SetBool("isWalking", false);
        //    isAttacking = false;
        //}
        //else if (distance > stopDistance)
        //{
        //    // Move towards the player
        //    Vector3 pos = Vector3.MoveTowards(transform.position, player.position, speed * Time.deltaTime);
        //    rg.MovePosition(pos);
        //    transform.LookAt(player.position);
        //    anim.SetBool("isWalking", true);
        //    isAttacking = false;
        //}
        //else
        //{
        //    // Stop moving and attack if close enough
        //    anim.SetBool("isWalking", false);
        //    if (!isAttacking && Time.time >= lastAttackTime + attackInterval)
        //    {
        //        StartCoroutine(Attack());
        //        lastAttackTime = Time.time;
        //    }
        //}
        Movements();
    }
    public NavMeshAgent agent;
    void Movements()
    {
        float distance = Vector3.Distance(transform.position, player.position);

        if (distance > detectDistance)
        {
            // Player is too far, enemy remains idle
            anim.SetBool("isWalking", false);
            isAttacking = false;
            return;
        }
        if (distance > stopDistance)
        {
            isAttacking = false;
            agent.SetDestination(player.position);
            anim.SetBool("isWalking", true);
            isAttacking = false;
        }
        else if(distance<=attackDistance)
        {
            isAttacking = true;
            StartCoroutine(Attack());
        }
    }
    IEnumerator Attack()
    {
        isAttacking = true;

        // Play attack animation
        anim.SetTrigger("Attack");
        yield return new WaitForSeconds(anim.GetCurrentAnimatorStateInfo(0).length);
        // Play attack sound
        //if (attackSound != null && audioSource != null)
        //{
        //    audioSource.PlayOneShot(attackSound);
        //}

        //// Wait for the animation attack duration
        //yield return new WaitForSeconds(anim.GetCurrentAnimatorStateInfo(0).length);

        //// Trigger player's damage
        ////if (playerScript != null && Vector3.Distance(transform.position, player.position) <= attackDistance)
        ////{
        ////    playerScript.TakeDamage(10); // Pass the damage value (e.g., 10) to the player's TakeDamage method
        ////}

        //isAttacking = false;
    }

    public void TakeDamage(int damage)
    {
        health -= damage; // Reduce health by the specified damage amount
        UpdateHealthUI();
        if (health <= 0)
        {
            Die();
        }
        else
        {
            Defend(); // Perform defend animation when taking damage
        }
    }

    void UpdateHealthUI()
    {
        // Update the health UI (if any)
    }

    public void Defend()
    {
        anim.SetTrigger("Defend");
    }

    void Die()
    {
        // Add logic for enemy death (e.g., play death animation, destroy game object)
        anim.SetTrigger("Die");
        Destroy(gameObject, 1f); // Delayed destruction
    }
}
